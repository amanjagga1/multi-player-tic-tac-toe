{"version":3,"sources":["components/ticboard/TicBox.js","redux/actions.js","components/ticboard/TicBoard.js","components/ConfigurationBox.js","components/Players.js","components/Winner.js","components/PeerConnection.js","components/ActivePlayer.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["TicBox","props","className","onClick","clickHandler","value","connect","state","grid","activePlayer","streak","gridSize","totalTurns","gameWinner","myIdentity","dispatch","playTurn","payload","getState","window","conn","send","type","isWinningPosition","X","Y","adjPostions","i","j","length","map","row","key","column","id","alert","playingTurn","console","log","resetGrid","useState","setGridSize","setStreak","Input","placeholder","onChange","event","element","parseInt","Button","presentState","partnerIdentity","replaceState","setIdentity","peerId","name","peer","setPeer","partnerPeerId","setpartnerPeerId","partnerRef","useRef","startGame","myId","partnerId","useEffect","current","Peer","on","data","children","ele","ActivePlayer","player","Boolean","location","hostname","match","initialState","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2fe0c786.chunk.js","sourcesContent":["import React from 'react';\n\nconst TicBox = (props) => {\n  return (\n    <span className='Box' onClick={props.clickHandler}>{props.value}</span>\n  )\n};\n\nexport default TicBox;\n","export const setIdentity = (id, peerId, type) => {\n  console.log('set', id, peerId, type)\n  const name = id === 'X' ? 'Player 1' : 'Player 2';\n  return {\n    type,\n    value: {id, name, peerId}\n  }\n}\n\n\nexport const resetGrid = (payload) => {\n  return function(dispatch) {\n    window.conn && window.conn.send({\n      activePlayer: 'X',\n      gameWinner: null,\n      totalTurns: 0,\n      grid: payload.grid,\n      gridSize: payload.gridSize,\n      streak: payload.streak\n    });\n    dispatch({\n      type: 'RESET_GRID',\n      ...payload\n  \n    })\n  }\n}\n\nexport const playTurn = (payload) => {\n  return function(dispatch, getState) {\n    const state = getState();\n    window.conn && window.conn.send({\n      gridSize: state.gridSize,\n      streak: state.streak,\n      grid: payload.grid,\n      gameWinner: payload.gameWinner,\n      activePlayer: payload.activePlayer,\n      totalTurns: payload.totalTurns\n    })\n    dispatch({\n      type: 'PLAY_TURN',\n      ...payload\n  \n    })\n  }\n}\n\nexport const replaceState = (payload) => {\n  return {\n    type: 'REPLACE_STATE',\n    ...payload\n\n  }\n}\n","import React from 'react';\nimport TicBox from './TicBox';\nimport { connect } from 'react-redux';\nimport { playTurn } from '../../redux/actions';\n\nconst TicBoard = (props) => {\n  const playingTurn = (i, j) => {\n    if (props.myIdentity.id !== props.activePlayer) {\n      alert('Not your turn')\n      return;\n    }\n    const grid = [...props.grid];\n    if (!grid[i][j] && !props.gameWinner) {\n      grid[i][j] = props.activePlayer;\n      const totalTurns = props.totalTurns + 1;\n    let gameWinner = false;\n    if (totalTurns >= props.streak) {\n      if (isWinningPosition(i, j, grid)) {\n        gameWinner = props.activePlayer\n      };\n    }\n    if (!gameWinner && props.totalTurns === (props.gridSize * props.gridSize)) {\n      gameWinner = 'Draw'\n    }\n    const activePlayer = props.activePlayer ==='X' ? 'O': 'X';\n    props.playTurn({ grid, activePlayer, gameWinner, totalTurns })\n    }\n    \n  }\n  const isWinningPosition = (X, Y, grid) => {\n    // const grid = props.grid;\n    let adjPostions = 1;\n    let i = X -1;\n    let j = Y;\n    while(i >= 0 && grid[i][j] === props.activePlayer && adjPostions < props.streak) {\n      i--;\n      adjPostions++;\n\n    }\n    if (adjPostions === props.streak)\n      return true;\n    i = X +1;\n    while(i < grid.length && grid[i][j] === props.activePlayer && adjPostions < props.streak) {\n      i++;\n      adjPostions++;\n    }\n    if (adjPostions === props.streak)\n      return true;\n    j = Y - 1;\n    i = X;\n    adjPostions = 1;\n    while( j >= 0 && grid[i][j] === props.activePlayer && adjPostions < props.streak) {\n      j--;\n      adjPostions++;\n\n    }\n    if (adjPostions === props.streak)\n      return true;\n    j= Y + 1;\n    while(j < grid[i].length && grid[i][j] === props.activePlayer && adjPostions < props.streak) {\n      j++;\n      adjPostions++;\n    }\n    if (adjPostions === props.streak)\n      return true;\n    \n    i = X - 1;\n    j = Y - 1;\n    adjPostions = 1;\n    while( j >= 0 && i >= 0 && grid[i][j] === props.activePlayer && adjPostions < props.streak) {\n      j--;\n      i--;\n      adjPostions++;\n    }\n    if (adjPostions === props.streak)\n      return true;\n    j= Y + 1;\n    i = X + 1;\n    while(i < grid.length && j < grid[i].length && grid[i][j] === props.activePlayer && adjPostions < props.streak) {\n      j++;\n      i++;\n      adjPostions++;\n    }\n    if (adjPostions === props.streak)\n      return true;\n    \n    i = X - 1;\n    j = Y + 1;\n    adjPostions = 1;\n    while(i >= 0 && j < grid[i].length && grid[i][j] === props.activePlayer && adjPostions < props.streak) {\n      j++;\n      i--;\n      adjPostions++;\n    }\n    if (adjPostions === props.streak)\n      return true;\n    \n    i = X + 1;\n    j = Y - 1;\n    while(i < grid.length && j >= 0 && grid[i][j] === props.activePlayer && adjPostions < props.streak) {\n      j--;\n      i++;\n      adjPostions++;\n    }\n    if (adjPostions === props.streak)\n      return true;\n    \n    return false;\n  }\n  return (\n    <div>\n      {props.grid.map((row, i) => (\n        <div className='u-flex' key={i}>\n        {row && row.map((column, j) => (\n          <TicBox key={i + '' + j} value={column} clickHandler={() => playingTurn(i, j)}/>\n        ))}\n        </div>\n      ))}\n    </div>\n  )\n};\n\nconst mapStateToProps = (state) => {\n  \n  return {\n    grid: state.grid,\n    activePlayer: state.activePlayer,\n    streak: state.streak,\n    gridSize: state.gridSize,\n    totalTurns: state.totalTurns,\n    gameWinner: state.gameWinner,\n    myIdentity: state.myIdentity\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    playTurn: (payload) => dispatch(playTurn(payload)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TicBoard);\n\n","import React, { useState } from 'react';\nimport { Input, Button } from \"semantic-ui-react\";\nimport { connect } from 'react-redux';\nimport { resetGrid } from './../redux/actions';\n\nconst ConfigurationBox = (props) => {\n  const [gridSize, setGridSize] = useState('');\n  const [streak, setStreak] = useState('');\n  const grid = [];\n  const resetGame = () => {\n    if (!gridSize || !streak) {\n      alert('Enter grid size and steak')\n      return;\n    }\n    if (streak > gridSize) {\n      alert('Streak cannot be greater than grid')\n      return;\n    }\n    for ( var i = 0; i < gridSize; i++ ) {\n      grid[i] =[];\n      for ( var j = 0; j < gridSize; j++ ) {\n         grid[i][j] = null;\n      }\n    }\n    props.resetGrid({gridSize, streak, grid})\n\n  };\n  return (\n    <div>\n      <Input className='u-margin' placeholder='n * n grid' value={gridSize} onChange={(event,element) => setGridSize(parseInt(element.value, 10))} />\n        with\n      <Input className='u-margin' placeholder='M streak' value={streak} onChange={(event,element) => setStreak(parseInt(element.value, 10))} />\n      <Button className='u-margin' onClick={resetGame}>Start or Reset Game</Button>\n    </div>\n  )\n  \n};\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  console.log(state.gridSize, state.streak, 'streak')\n  return {\n    gridSize: state.gridSize,\n    streak: state.streak\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    resetGrid: (payload) => { dispatch(resetGrid(payload)); }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigurationBox);","import React from 'react';\nimport { connect } from 'react-redux'\n\nconst Players = (props) => {\n  return (\n    <div className='u-flex'>\n      <div className={`Player u-margin ${props.activePlayer === 'X' ? 'u-active' : null}`}>Player 1(X)</div>\n      <div className={`Player u-margin ${props.activePlayer === 'O' ? 'u-active' : null}`}>Player 2(O)</div>\n    </div>\n  )\n\n};\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    activePlayer: state.activePlayer\n  }\n}\n\n\nexport default connect(mapStateToProps)(Players);","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst Winner = (props) => {\n  if (!props.gameWinner)\n    return null;\n  return ( \n    <div>\n      <h1>Game Over</h1>\n      <h2>{props.gameWinner === 'Draw' ? 'Draw' : `Player ${props.gameWinner} wins`} </h2>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  console.log(state.grid, state.totalTurns, state.gameWinner, 'winner')\n  return {\n    gameWinner: state.gameWinner\n  }\n}\nexport default connect(mapStateToProps)(Winner);","import React, { useState, useEffect, useRef } from 'react';\nimport { Button, Input } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { replaceState, setIdentity } from '../redux/actions';\n\nconst PeerConnection = (props) => {\n  let [peer, setPeer] = useState({});\n  let [partnerPeerId, setpartnerPeerId] = useState(null);\n  let partnerRef = useRef(partnerPeerId);\n  const startGame = (peer, partnerPeerId, myId, partnerId) => {\n    console.log('peerAndar', peer, peer.id, partnerPeerId)\n    var conn =  peer.connect(partnerPeerId);\n    props.setIdentity(myId, peer.id, 'SET_MY_IDENTITY');\n    props.setIdentity(partnerId, partnerPeerId, 'SET_PARTNER_IDENTITY');\n    window.conn = conn;\n  }\n  useEffect(() => {\n    partnerRef.current = partnerPeerId;\n  });\n  useEffect(() => {\n    const peer = new window.Peer();\n    peer.on('open', function(id) {\n      setPeer(peer);\n    });\n    peer.on('connection', (conn) => {\n      if (!partnerRef.current)\n        startGame(peer,conn.peer, 'O', 'X')\n      conn.on('data', (data) => {\n        props.replaceState(data)\n      });\n    })\n  }, []);\n  // const { partnerIdentity } = props;\n  // useEffect(() => {\n  //   console.log('pp',partnerIdentity.id)\n  //   if (peer && peer.on) {\n  //     peer.on('connection', (conn) => {\n  //       console.log('connect again & again')\n  //       if (!partnerIdentity.id)\n  //         startGame(peer,conn.peer, 'O', 'X')\n  //     });\n  //     return () => (peer.off('connection', (conn) => {\n  //       console.log('disconnect again & again')\n  //       if (!partnerIdentity.id)\n  //         startGame(peer,conn.peer, 'O', 'X')\n  //     }));\n  //   }\n    \n  // }, [peer, partnerIdentity])\n  if (props.partnerIdentity.id) {\n    return props.children;\n  }\n  return (\n    <div>\n        Your peer id <h2>{peer.id}</h2>\n      <div>\n        <Input className='u-margin' placeholder='Partner peer id' onChange ={(ele, {value}) => setpartnerPeerId(value)}/>\n        <Button className='u-margin' onClick={() => startGame(peer,partnerPeerId, 'X', 'O')}>Connect</Button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    presentState: {\n      gridSize: state.gridSize,\n      streak: state.streak,\n      activePlayer: state.activePlayer,\n      grid: state.grid,\n      gameWinner: state.gameWinner,\n      totalTurns: state.totalTurns\n    },\n    ...state,\n    partnerIdentity: state.partnerIdentity\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    replaceState: (payload) => dispatch(replaceState(payload)),\n    setIdentity: (id, peerId, type) => dispatch(setIdentity(id, peerId, type))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(PeerConnection);","import React from 'react';\n\nconst ActivePlayer = (props) => {\n  return (\n    <h2>You are {props.player}</h2>\n  )\n};\n\nexport default ActivePlayer;","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nimport TicBoard from './components/ticboard/TicBoard.js';\nimport ConfigurationBox from './components/ConfigurationBox';\nimport Players from './components/Players';\nimport Winner from './components/Winner';\nimport PeerConnection from './components/PeerConnection';\nimport ActivePlayer from './components/ActivePlayer';\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <PeerConnection>\n        <ActivePlayer player={props.myIdentity.name} />\n        <ConfigurationBox />\n        <Players />\n        <TicBoard />\n        <Winner />\n      </PeerConnection>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    partnerIdentity: state.partnerIdentity,\n    myIdentity: state.myIdentity\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst initialState = {\n  gridSize: null,\n  streak: null,\n  activePlayer: 'X',\n  grid: [],\n  gameWinner: null,\n  totalTurns: 0,\n  myIdentity: {},\n  partnerIdentity: {}\n};\n\nexport const reducer =  function(state = initialState, action) {\n  console.log(action.type);\n  switch (action.type) {\n    case 'INITALIZE_GRID': {\n      return {\n        ...state,\n        grid: action.grid\n      }\n    }\n    case 'PLAY_TURN': {\n      return {\n        ...state,\n        grid: action.grid,\n        gameWinner: action.gameWinner,\n        activePlayer: action.activePlayer,\n        totalTurns: action.totalTurns\n      }\n    }\n    case 'RESET_GRID': {\n      return {\n        ...initialState,\n        myIdentity: state.myIdentity,\n        partnerIdentity: state.partnerIdentity,\n        grid: action.grid,\n        gridSize: action.gridSize,\n        streak: action.streak\n      }\n    }\n    case 'REPLACE_STATE': {\n      return {\n        ...state,\n        gridSize: action.gridSize,\n        streak: action.streak,\n        activePlayer: action.activePlayer,\n        grid: action.grid,\n        gameWinner: action.gameWinner,\n        totalTurns: action.totalTurns\n      }\n    }\n    case 'SET_MY_IDENTITY': {\n      return {\n        ...state,\n        myIdentity: action.value\n      }\n    }\n    case 'SET_PARTNER_IDENTITY': {\n      return {\n        ...state,\n        partnerIdentity: action.value\n      }\n    }\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(reducer, applyMiddleware(thunk));\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n<Provider store={store}>\n  <App />\n</Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}